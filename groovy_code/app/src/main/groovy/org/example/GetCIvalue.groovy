/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example
import org.apache.commons.csv.CSVFormat
import org.apache.commons.csv.CSVParser
import groovyx.net.http.RESTClient
import groovy.json.JsonSlurper

import java.nio.file.Files
import java.nio.file.Paths


// TODO: new CI for each task? Downside -> the burden on ElectricityMaps server would be even greater

class GetCIvalue {
    // Define the API key and location
    String apiKey
    String location
    String csvFilePath

    // Constructor to initialize the API key and location
    GetCIvalue(String apiKey, String location, String csvFilePath) {
        this.apiKey = apiKey
        this.location = location
        this.csvFilePath = csvFilePath
    }

    // Function to retrieve real-time carbon intensity from Electricity Maps API
    def getRealtimeCI() {
        def API_response = ['bash', '-c', "curl 'https://api.electricitymap.org/v3/carbon-intensity/latest?zone=${this.location}' -H 'auth-token: ${this.apiKey}'"].execute()
        API_response.waitFor()

        try {
            println "Raw response: ${API_response.text}"
            if (API_response.status == 200) {
                def json = new JsonSlurper().parseText(API_response.text)
                return json['carbonIntensity']
            } else {
                println "Error: Received status ${API_response.status} from Electricity Maps API."
                return null
            }
        } catch (Exception e) {
            println "Exception occurred while fetching data from Electricity Maps API: ${e.message}"
            return null
        }
    }

    // Function to read carbon intensity from CSV file
    def getCIFromCSV() {
        try {
            Reader reader = Files.newBufferedReader(Paths.get(this.csvFilePath))
            CSVParser csvParser = new CSVParser(reader, CSVFormat.DEFAULT.withFirstRecordAsHeader())

            for (record in csvParser) {
                def zoneId = record.get('Zone id')
                if (zoneId != null && zoneId == this.location) {
                    def ciValue = record.get('Carbon intensity gCO₂eq/kWh (Life cycle)')
                    if (ciValue != null) {
                        println "Using carbon intensity from CSV for ${this.location}: $ciValue"
                        return ciValue.toDouble()
                    } else {
                        println "No carbon intensity value found for ${this.location} in CSV."
                    }
                }
            }
            // If location not found, look for world average
            reader = Files.newBufferedReader(Paths.get(this.csvFilePath))
            csvParser = new CSVParser(reader, CSVFormat.DEFAULT.withFirstRecordAsHeader())
            for (record in csvParser) {
                def zoneId = record.get('Zone id')
                if (zoneId != null && zoneId.equalsIgnoreCase('global')) {
                    def ciValue = record.get('Carbon intensity gCO₂eq/kWh (Life cycle)')
                    if (ciValue != null) {
                        println "Using world average carbon intensity: $ciValue"
                        return ciValue.toDouble()
                    }
                    else {
                        println "No global average carbon intensity value found in CSV."
                    }
                }
            }
        } catch (IOException e) {
            println "Error reading CSV file: ${e.message}"
        }
        return null
    }

    // Main function to determine carbon intensity
    def determineCarbonIntensity() {
        def carbonIntensity = getRealtimeCI()
        if (carbonIntensity == null) {
            println "Falling back to CSV data for location: ${this.location}"
            carbonIntensity = getCIFromCSV()
        }

        if (carbonIntensity != null) {
            println "Carbon Intensity for ${this.location ?: 'world'}: ${carbonIntensity} gCO₂eq/kWh"
        } else {
            println "Unable to determine carbon intensity."
        }
    }

    static void main(String[] args) {
        // Main script execution
        def apiKey = "f0j3h7xxmhs1ygt8I3Kg"
        def location = "DE"
        def csvFilePath = 'output_files/fallbackCIDataTable.csv'

        // Create an instance of GetCIvalue and determine carbon intensity
        def ciValueGetter = new GetCIvalue(apiKey, location, csvFilePath)
        ciValueGetter.determineCarbonIntensity()
    }
}







